# ¬´Telegram-Cities-Game-Automation¬ª
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –¥–ª—è –∏–≥—Ä—ã "–ì–æ—Ä–æ–¥–∞", —Ä–∞–±–æ—Ç–∞—é—â–∏–π —á–µ—Ä–µ–∑ –≤–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç.

# –î–û –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê:
# RENDER_APP_URL –≤ config.py
# SESSION_STRING = os.getenv("SESSION_STRING_SERVER") –≤ bot.py | –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫ –≤ —Å–µ—Ä–≤–µ—Ä–µ, –∏–Ω–∞—á–µ "SESSION_STRING_TELETHON"
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ bot.py

from telethon import TelegramClient, events, sessions
import asyncio
import os
import re
import random
from dotenv import load_dotenv
import logging
import colorlog
from flask import Flask
import threading
import aiohttp
import config

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–∏—à–Ω–∏—Ö –ª–æ–≥–æ–≤
class OutputFilter:
    def __init__(self, original_output):
        self.original_output = original_output

    def write(self, text):
        if "Got difference for" not in text:
            self.original_output.write(text)

    def flush(self):
        self.original_output.flush()

import sys
sys.stdout = OutputFilter(sys.stdout)
sys.stderr = OutputFilter(sys.stderr)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = colorlog.StreamHandler()
handler.setFormatter(colorlog.ColoredFormatter(
    '%(log_color)s%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    log_colors={
        'DEBUG': 'cyan',
        'INFO': 'green',
        'WARNING': 'yellow',
        'ERROR': 'red',
        'CRITICAL': 'red,bg_white',
    }
))

logger = colorlog.getLogger(__name__)
logger.addHandler(handler)
logger.setLevel(logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SESSION_STRING = os.getenv("SESSION_STRING_SERVER")
API_ID = config.API_ID
API_HASH = config.API_HASH

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telethon
client = TelegramClient(
    sessions.StringSession(SESSION_STRING),
    API_ID,
    API_HASH,
    system_version="4.16.30-vxCUSTOM"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
CHAT_ID = -1002157100033       # ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞ (https://t.me/Family_Worlds/1)
TOPIC_ID = 266173              # ID —Ç–µ–º—ã/–≤–µ—Ç–∫–∏ —á–∞—Ç–∞ (https://t.me/Family_Worlds/266173)
GAME_BOT_ID = 1147621126       # ID –∏–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞ (@igravgorodabot)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
class State:
    is_active = False
    used_cities = set()
    current_letter = None
    last_city = None
    cities = {}
    mode = "—Å–ø–∏–¥—Ä–∞–Ω"  # "—Å–ø–∏–¥—Ä–∞–Ω" | "—Å–ø–æ–∫–æ–π–Ω–æ"
    my_user_id = None

# –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_cities():
    with open('cities.txt', 'r', encoding='utf-8') as f:
        for city in f.readlines():
            city = city.strip().lower()
            first_letter = city[0].upper()
            if first_letter not in State.cities:
                State.cities[first_letter] = []
            State.cities[first_letter].append(city)

load_cities()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

@app.route("/ping")
def ping():
    return "pong", 200

def run_web_server():
    app.run(host="0.0.0.0", port=8080)

threading.Thread(target=run_web_server, daemon=True).start()

async def self_ping():
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{config.RENDER_APP_URL}/ping") as resp:
                    logger.info(f"Self-ping status: {resp.status}")
        except Exception as e:
            logger.error(f"Self-ping error: {str(e)}")
        await asyncio.sleep(300)

@client.on(events.NewMessage(
    from_users=GAME_BOT_ID,
    chats=CHAT_ID
))
async def game_handler(event):
    text = event.raw_text
    logger.info(f"Received message: {text}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã
    if "–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞" in text:
        State.used_cities.clear()
        State.current_letter = None
        State.last_city = None
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    if "–ü–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥ –±—É–¥–µ—Ç" in text:
        State.used_cities.clear()
        State.current_letter = None
        State.last_city = None
        logger.info("üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã")

        if not State.is_active:
            return
        
        letter_match = re.search(r'–Ω–∞ –±—É–∫–≤—É "([–ê-–Ø–∞-—è])"', text)
        if letter_match:
            State.current_letter = letter_match.group(1).upper()
            await send_next_city(event.chat_id)
        return

    if not State.is_active:
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±—É–∫–≤—ã
    if any(phrase in text for phrase in ["—É–∂–µ –±—ã–ª", "–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã"]):
        # –ò—â–µ–º –Ω–æ–≤—É—é –±—É–∫–≤—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        new_letter_match = re.search(r'—Å –±—É–∫–≤—ã\s*"([–ê-–Ø–∞-—è])"', text)
        if new_letter_match:
            new_letter = new_letter_match.group(1).upper()
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±—É–∫–≤—É –Ω–∞ {new_letter} –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")
            State.current_letter = new_letter
        
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "—É–∂–µ –±—ã–ª" - –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if "—É–∂–µ –±—ã–ª" in text:
            city_match = re.search(r'–ì–æ—Ä–æ–¥\s+"?([–ê-–Ø–∞-—è–Å—ë-]+)"?\s+—É–∂–µ –±—ã–ª', text)
            if city_match:
                invalid_city = city_match.group(1).strip().lower()
                State.used_cities.add(invalid_city)
                logger.info(f"üö´ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ used_cities: {invalid_city}")
        
        await send_next_city(event.chat_id)
        return

    # –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–π –±—É–∫–≤—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã
    letter_match = re.search(r'–Ω–∞ (?:–±—É–∫–≤—É|–Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å –±—É–∫–≤—ã) "([–ê-–Ø–∞-—è])"', text)
    if letter_match:
        State.current_letter = letter_match.group(1).upper()
        await send_next_city(event.chat_id)

async def send_next_city(chat_id):
    if not State.current_letter:
        return

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ "—Å–ø–æ–∫–æ–π–Ω–æ"
    if State.mode == "—Å–ø–æ–∫–æ–π–Ω–æ":
        delay = random.uniform(2.5, 5.5)
        logger.info(f"üïí –†–µ–∂–∏–º '—Å–ø–æ–∫–æ–π–Ω–æ': –∂–¥–µ–º {delay:.1f} —Å–µ–∫.")
        await asyncio.sleep(delay)

    city = None
    available = State.cities.get(State.current_letter, [])
    
    for c in available:
        if c not in State.used_cities:
            city = c
            break

    if city:
        try:
            await client.send_message(
                entity=chat_id,
                message=city.capitalize(),
                reply_to=TOPIC_ID  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ–º—ã
            )
            State.used_cities.add(city)
            State.last_city = city
        except Exception as e:
            logger.error(f"Error sending city: {str(e)}")
    else:
        if State.mode == "—Å–ø–∏–¥—Ä–∞–Ω":
            await client.send_message(chat_id, '/stop@igravgorodabot', reply_to=TOPIC_ID)
            await asyncio.sleep(1)
            await client.send_message(chat_id, '/start@igravgorodabot', reply_to=TOPIC_ID)
        else:
            logger.info("üîá –†–µ–∂–∏–º '—Å–ø–æ–∫–æ–π–Ω–æ': –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É")

@client.on(events.NewMessage(chats=CHAT_ID, pattern='/mode —Å–ø–∏–¥—Ä–∞–Ω'))
async def set_speedrun_mode(event):
    if event.sender_id != State.my_user_id:
            return
    State.mode = "—Å–ø–∏–¥—Ä–∞–Ω"
    await event.reply('üöÄ –†–µ–∂–∏–º "—Å–ø–∏–¥—Ä–∞–Ω" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã, –∞–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫')

@client.on(events.NewMessage(chats=CHAT_ID, pattern='/mode —Å–ø–æ–∫–æ–π–Ω–æ'))
async def set_quiet_mode(event):
    if event.sender_id != State.my_user_id:
            return
    State.mode = "—Å–ø–æ–∫–æ–π–Ω–æ"
    await event.reply('‚òï –†–µ–∂–∏–º "—Å–ø–æ–∫–æ–π–Ω–æ" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤, —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫')

@client.on(events.NewMessage(chats=CHAT_ID, pattern='/bot_on'))
async def activate_bot(event):
    if event.sender_id != State.my_user_id:
            return
    State.is_active = True
    await event.reply('‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')

@client.on(events.NewMessage(chats=CHAT_ID, pattern='/bot_off'))
async def deactivate_bot(event):
    if event.sender_id != State.my_user_id:
            return
    State.is_active = False
    await event.reply('‚õî –ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')

async def main():
    await client.start()
    me = await client.get_me()
    State.my_user_id = me.id
    logger.info(f"Bot started! User ID: {State.my_user_id}")
    
    asyncio.create_task(self_ping())
    
    await client.run_until_disconnected()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped")
